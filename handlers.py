import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import AsyncSessionLocal, User, Pair, AssignedTask, Task
from sqlalchemy import select, func, and_
from sqlalchemy.exc import IntegrityError
from keyboards import task_buttons
from utils import safe_send_message
from tasks import send_task_to_pair  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_pair_code = State()

class AdminTask(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMIN_IDS = [1919847749]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–∏ ID

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.set_state(Registration.waiting_for_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@router.message(Registration.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.waiting_for_pair_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤–∞—à–µ–π –ø–∞—Ä—ã (–µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –Ω–æ–≤—É—é ‚Äî –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –µ–≥–æ):")

@router.message(Registration.waiting_for_pair_code)
async def get_pair_code(message: Message, state: FSMContext, bot):
    data = await state.get_data()
    name = data['name']
    code = message.text

    async with AsyncSessionLocal() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user_result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
            existing_user = existing_user_result.scalar_one_or_none()
            
            if existing_user:
                await state.clear()
                await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return

            pair_result = await session.execute(select(Pair).where(Pair.code == code))
            pair = pair_result.scalar_one_or_none()

            if not pair:
                pair = Pair(code=code)
                session.add(pair)
                await session.commit()
                await session.refresh(pair)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ —Å –∫–æ–¥–æ–º {code}")

            user = User(tg_id=message.from_user.id, name=name, pair_code=code, pair_id=pair.id)
            session.add(user)
            await session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞—Ä–µ {pair.id}")

        except IntegrityError as e:
            await session.rollback()
            if "users_tg_id_key" in str(e):
                await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        except Exception as e:
            await session.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")

    await state.clear()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

@router.message(Command("stats"))
async def show_stats(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    async with AsyncSessionLocal() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
            user = user_result.scalar_one_or_none()
            
            if not user or not user.pair_id:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞—Ä–µ.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            total_result = await session.execute(
                select(func.count(AssignedTask.id)).where(AssignedTask.pair_id == user.pair_id)
            )
            total_tasks = total_result.scalar_one() or 0
            
            accepted_result = await session.execute(
                select(func.count(AssignedTask.id)).where(
                    and_(AssignedTask.pair_id == user.pair_id, AssignedTask.status == "accepted")
                )
            )
            accepted_tasks = accepted_result.scalar_one() or 0
            
            rejected_result = await session.execute(
                select(func.count(AssignedTask.id)).where(
                    and_(AssignedTask.pair_id == user.pair_id, AssignedTask.status == "rejected")
                )
            )
            rejected_tasks = rejected_result.scalar_one() or 0
            
            pending_result = await session.execute(
                select(func.count(AssignedTask.id)).where(
                    and_(AssignedTask.pair_id == user.pair_id, AssignedTask.status == "pending")
                )
            )
            pending_tasks = pending_result.scalar_one() or 0
            
            stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –ø–∞—Ä—ã:</b>

–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {accepted_tasks}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_tasks}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_tasks}
"""
            
            await message.answer(stats_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
@router.message(Command("sendnow"), F.from_user.id.in_(ADMIN_IDS))
async def send_tasks_now(message: Message, bot):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞–Ω–∏–π")
    
    try:
        sent_count = 0
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã
            result = await session.execute(select(User.pair_id).distinct())
            pair_ids = [row[0] for row in result.fetchall() if row[0] is not None]

            if not pair_ids:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ–º –ø–∞—Ä–∞–º
            for pair_id in pair_ids:
                try:
                    success = await send_task_to_pair(bot, pair_id, session)
                    if success:
                        sent_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–µ {pair_id}: {e}")
            
            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–∞—Ä–∞–º!")
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏—è {sent_count} –ø–∞—Ä–∞–º")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏–π –∞–¥–º–∏–Ω–æ–º {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏–π.")

@router.message(Command("sendnow"), F.from_user.id.not_in_(ADMIN_IDS))
async def not_admin_send(message: Message):
    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("accept_"))
async def accept_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    
    async with AsyncSessionLocal() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        task_result = await session.execute(select(AssignedTask).where(AssignedTask.id == task_id))
        assigned_task = task_result.scalar_one_or_none()
        
        if assigned_task:
            old_status = assigned_task.status
            assigned_task.status = "accepted"
            await session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            partner_tg_id = await get_partner_tg_id(callback.from_user.id, session)
            if partner_tg_id:
                await safe_send_message(
                    callback.bot,
                    partner_tg_id,
                    "‚úÖ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ!"
                )
            
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(F.data.startswith("reject_"))
async def reject_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    
    async with AsyncSessionLocal() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        task_result = await session.execute(select(AssignedTask).where(AssignedTask.id == task_id))
        assigned_task = task_result.scalar_one_or_none()
        
        if assigned_task:
            assigned_task.status = "rejected"
            await session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ {task_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            task_info_result = await session.execute(
                select(Task).where(Task.id == assigned_task.task_id)
            )
            task_info = task_info_result.scalar_one_or_none()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä—ã
            user_result = await session.execute(
                select(User).where(User.pair_id == assigned_task.pair_id)
            )
            users = user_result.scalars().all()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user in users:
                if user.tg_id != callback.from_user.id:  # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                    await safe_send_message(
                        callback.bot,
                        user.tg_id,
                        f"‚ùå –ü–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ:\n\n<b>{task_info.title}</b>\n{task_info.description}"
                    )
                else:  # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª
                    await safe_send_message(
                        callback.bot,
                        user.tg_id,
                        "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ü–∞—Ä—Ç–Ω–µ—Ä —Ç–æ–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ª–∏ –æ–±–∞ - –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            all_rejected = await check_if_both_rejected(assigned_task.pair_id, session)
            if all_rejected:
                logger.info(f"–û–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–∞—Ä–µ {assigned_task.pair_id}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
                await send_new_task_to_pair(callback.bot, assigned_task.pair_id, session)
            
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ª–∏ –æ–±–∞
async def check_if_both_rejected(pair_id: int, session):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
    task_result = await session.execute(
        select(AssignedTask).where(AssignedTask.pair_id == pair_id).order_by(AssignedTask.date.desc()).limit(1)
    )
    last_task = task_result.scalar_one_or_none()
    
    if not last_task:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏
    user_result = await session.execute(select(User).where(User.pair_id == pair_id))
    users = user_result.scalars().all()
    
    rejected_count = 0
    for user in users:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å rejected, —Ç–æ –æ—Ç–∫–ª–æ–Ω–∏–ª
        if last_task.status == "rejected":
            rejected_count += 1
    
    return rejected_count == len(users)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–µ
async def send_new_task_to_pair(bot, pair_id: int, session):
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task_result = await session.execute(select(Task).order_by(func.random()).limit(1))
    task = task_result.scalar_one_or_none()
    if not task:
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    assigned = AssignedTask(pair_id=pair_id, task_id=task.id)
    session.add(assigned)
    await session.commit()
    await session.refresh(assigned)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–µ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    user_result = await session.execute(select(User).where(User.pair_id == pair_id))
    users = user_result.scalars().all()
    for user in users:
        await safe_send_message(
            bot,
            user.tg_id,
            f"üîÑ –û–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –í–æ—Ç –Ω–æ–≤–æ–µ:\n\n<b>{task.title}</b>\n{task.description}",
            reply_markup=task_buttons(assigned.id)
        )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
async def get_partner_tg_id(user_tg_id: int, session):
    user_result = await session.execute(select(User).where(User.tg_id == user_tg_id))
    user = user_result.scalar_one_or_none()
    
    if user and user.pair_id:
        partner_result = await session.execute(
            select(User.tg_id).where(
                User.pair_id == user.pair_id,
                User.tg_id != user_tg_id
            )
        )
        partner = partner_result.scalar_one_or_none()
        return partner
    return None

# –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–û–ù–ê–õ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
@router.message(Command("addtask"), F.from_user.id.in_(ADMIN_IDS))
async def add_task_start(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
    await state.set_state(AdminTask.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

@router.message(AdminTask.waiting_for_title)
async def add_task_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AdminTask.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

@router.message(AdminTask.waiting_for_description)
async def add_task_description(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data['title']
    description = message.text

    async with AsyncSessionLocal() as session:
        task = Task(title=title, description=description)
        session.add(task)
        await session.commit()
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {title}")
    
    await state.clear()
    await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@router.message(Command("addtask"), F.from_user.id.not_in_(ADMIN_IDS))
async def not_admin(message: Message):
    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")